#!/usr/bin/env python3

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import os
import agent

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

# Connect to redis
rdb = agent.redis_connect()

# Configure Traefik to route WebTop's host requests to the webtop module
set_route_data = {
    'instance': os.environ['MODULE_ID'],
    'url':  'http://127.0.0.1:' + os.environ["TCP_PORT"],
    'http2https': True,
    'host': data["hostname"],
    'lets_encrypt_check': True,
    'lets_encrypt_cleanup': True,
}
if 'request_https_certificate' in data:
    set_route_data['lets_encrypt'] = data['request_https_certificate']

response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data=set_route_data
)

# Check for ACME certificate error and set validation stop
for item in response['output']:
    if item.get('error') == 'newcert_acme_error':
        agent.set_status('validation-failed')
        json.dump([{'field':'host','parameter':'names','value': data["hostname"],'error':'newcert_acme_error', 'details': item.get('details')}], fp=sys.stdout)
        sys.exit(4)

# Check if traefik configuration has been successful
agent.assert_exp(response['exit_code'] == 0)

# Update environment variable (after traefik configuration)
agent.set_env("WEBTOP_REQUEST_HTTPS_CERTIFICATE", data.get("request_https_certificate", "false"))
