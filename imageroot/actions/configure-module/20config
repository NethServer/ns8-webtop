#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import os
import agent
import subprocess

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

agent_id = os.getenv("AGENT_ID", "")
if not agent_id:
    raise Exception("AGENT_ID not found inside the environemnt")

# Connect to redis
rdb = agent.redis_connect()

webtop_request_https_certificate = os.environ["WEBTOP_REQUEST_HTTPS_CERTIFICATE"].lower() in ('true', '1', 't')
if data.get("request_https_certificate") is not None:
    if data.get("request_https_certificate") != webtop_request_https_certificate:
        webtop_request_https_certificate = data["request_https_certificate"]
        agent.set_env("WEBTOP_REQUEST_HTTPS_CERTIFICATE", data["request_https_certificate"])

# Configure Traefik to route WebTop's host requests to the webtop module
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': os.environ['MODULE_ID'],
        'url':  'http://127.0.0.1:' + os.environ["TCP_PORT"],
        'http2https': True,
        'lets_encrypt': webtop_request_https_certificate,
        'host': data["hostname"],
    }
)
# Check if traefik configuration has been successfull
agent.assert_exp(response['exit_code'] == 0)

if "mail_module" in data and "mail_domain" in data:
    mail_domain = data["mail_domain"]
    # Configure Traefik to route to autoconfig for thunderbird
    response = agent.tasks.run(
        agent_id=agent.resolve_agent_id('traefik@node'),
        action='set-route',
        data={
            'instance': 'autoconfig-' + os.environ['MODULE_ID'],
            'url':  'http://127.0.0.1:' + os.environ["TCP_PORT"],
            'http2https': False,
            'lets_encrypt': webtop_request_https_certificate,
            'host': 'autoconfig.' + mail_domain,
        }
    )
    # Check if traefik configuration has been successfull
    agent.assert_exp(response['exit_code'] == 0)
    # Configure Traefik to route to autodiscover for outlook
    response = agent.tasks.run(
        agent_id=agent.resolve_agent_id('traefik@node'),
        action='set-route',
        data={
            'instance': 'autodiscover-' + os.environ['MODULE_ID'],
            'url':  'http://127.0.0.1:' + os.environ["TCP_PORT"],
            'http2https': False,
            'lets_encrypt': webtop_request_https_certificate,
            'host': 'autodiscover.' + mail_domain,
        }
    )
    # Check if traefik configuration has been successfull
    agent.assert_exp(response['exit_code'] == 0)

public_url = 'https://' + data["hostname"] + '/webtop'
dav_url = 'https://' + data["hostname"] + '/webtop-dav/server.php'

with subprocess.Popen(['podman', 'exec', '-i', 'postgres', 'psql', '-U', 'postgres', 'webtop5'], stdout=sys.stderr, stdin=subprocess.PIPE, text=True) as psql:
    print("DELETE FROM \"core\".\"settings\" WHERE service_id = 'com.sonicle.webtop.core' and key = 'public.url';\n", file=psql.stdin)
    print("INSERT INTO \"core\".\"settings\" (\"service_id\", \"key\", \"value\") VALUES ('com.sonicle.webtop.core', 'public.url', \'" + public_url + "\');\n", file=psql.stdin)

    print("DELETE FROM \"core\".\"settings\" WHERE service_id = 'com.sonicle.webtop.core' and key = 'davserver.url';\n", file=psql.stdin)
    print("INSERT INTO \"core\".\"settings\" (\"service_id\", \"key\", \"value\") VALUES ('com.sonicle.webtop.core', 'davserver.url',\'" + dav_url + "\');\n", file=psql.stdin)

agent.assert_exp(psql.returncode == 0) # check the command is succesfull

agent.set_env("WEBTOP_HOSTNAME", data["hostname"])

if "locale" in data:

    locales = {
            'it_IT': {
                'LANGUAGE': 'it_IT',
                'START_DAY': '1',
                'DATE_FORMAT_LONG': 'dd MMM yyyy',
                'DATE_FORMAT_SHORT': 'dd/MM/yyyy',
                'TIME_FORMAT_SHORT': 'HH:mm',
                'TIME_FORMAT_LONG': 'HH:mm:ss',
                },
            'en_US': {
                'LANGUAGE': 'en_EN',
                'START_DAY': '0',
                'DATE_FORMAT_LONG': 'MMM dd, yyyy',
                'DATE_FORMAT_SHORT': 'MM/dd/yy',
                'TIME_FORMAT_SHORT': 'h:mm a',
                'TIME_FORMAT_LONG': 'h:mm:ss a',
                },
            'de_DE': {
                'LANGUAGE': 'de_DE',
                'START_DAY': '1',
                'DATE_FORMAT_LONG': 'dd MMM yyyy',
                'DATE_FORMAT_SHORT': 'dd.MM.yyyy',
                'TIME_FORMAT_SHORT': 'HH:mm',
                'TIME_FORMAT_LONG': 'HH:mm:ss',
                },
            'es_ES': {
                'LANGUAGE': 'es_ES',
                'START_DAY': '1',
                'DATE_FORMAT_LONG': 'dd. MMM yyyy.',
                'DATE_FORMAT_SHORT': 'd/M/yy',
                'TIME_FORMAT_SHORT': 'HH:mm',
                'TIME_FORMAT_LONG': 'HH:mm:ss',
                },
            'hr_HR': {
                'LANGUAGE': 'hr_HR',
                'START_DAY': '1',
                'DATE_FORMAT_LONG': 'dd. MMM yyyy.',
                'DATE_FORMAT_SHORT': 'dd. MM. yyyy.',
                'TIME_FORMAT_SHORT': 'HH:mm',
                'TIME_FORMAT_LONG': 'HH:mm:ss',
                },
            'hu_HU': {
                'LANGUAGE': 'hu_HU',
                'START_DAY': '1',
                'DATE_FORMAT_LONG': 'yyyy. MMMM dd.',
                'DATE_FORMAT_SHORT': 'yyyy.MM.dd.',
                'TIME_FORMAT_SHORT': 'HH:mm',
                'TIME_FORMAT_LONG': 'HH:mm:ss',
                },
            'fr_FR': {
                'LANGUAGE': 'fr_FR',
                'START_DAY': '1',
                'DATE_FORMAT_LONG': 'dd MMM yyyy',
                'DATE_FORMAT_SHORT': 'dd/MM/yyyy',
                'TIME_FORMAT_SHORT': 'HH:mm',
                'TIME_FORMAT_LONG': 'HH:mm:ss',
                }
            }

    with subprocess.Popen(['podman', 'exec', '-i', 'postgres', 'psql', '-U', 'postgres', 'webtop5'], stdout=sys.stderr, stdin=subprocess.PIPE, text=True) as psql:
        print("DELETE FROM core.settings WHERE service_id = 'com.sonicle.webtop.core' and key = 'default.i18n.languageTag';\n", file=psql.stdin)
        print("DELETE FROM core.settings WHERE service_id = 'com.sonicle.webtop.core' and key = 'default.i18n.startDay';\n", file=psql.stdin)
        print("DELETE FROM core.settings WHERE service_id = 'com.sonicle.webtop.core' and key = 'default.i18n.format.date.short';\n", file=psql.stdin)
        print("DELETE FROM core.settings WHERE service_id = 'com.sonicle.webtop.core' and key = 'default.i18n.format.date.long';\n", file=psql.stdin)
        print("DELETE FROM core.settings WHERE service_id = 'com.sonicle.webtop.core' and key = 'default.i18n.format.time.short';\n", file=psql.stdin)
        print("DELETE FROM core.settings WHERE service_id = 'com.sonicle.webtop.core' and key = 'default.i18n.format.time.long';\n", file=psql.stdin)

        print("INSERT INTO core.settings (service_id, key, value) VALUES ('com.sonicle.webtop.core', 'default.i18n.languageTag', '"  + locales[data['locale']]['LANGUAGE'] + "');\n", file=psql.stdin)
        print("INSERT INTO core.settings (service_id, key, value) VALUES ('com.sonicle.webtop.core', 'default.i18n.startDay', '" + locales[data['locale']]['START_DAY']+ "');\n", file=psql.stdin)
        print("INSERT INTO core.settings (service_id, key, value) VALUES ('com.sonicle.webtop.core', 'default.i18n.format.date.short', '" + locales[data['locale']]['DATE_FORMAT_SHORT'] + "');\n", file=psql.stdin)
        print("INSERT INTO core.settings (service_id, key, value) VALUES ('com.sonicle.webtop.core', 'default.i18n.format.date.long', '" + locales[data['locale']]['DATE_FORMAT_LONG'] + "');\n", file=psql.stdin)
        print("INSERT INTO core.settings (service_id, key, value) VALUES ('com.sonicle.webtop.core', 'default.i18n.format.time.short', '" + locales[data['locale']]['TIME_FORMAT_SHORT'] + "');\n", file=psql.stdin)
        print("INSERT INTO core.settings (service_id, key, value) VALUES ('com.sonicle.webtop.core', 'default.i18n.format.time.long', '" + locales[data['locale']]['TIME_FORMAT_LONG'] + "');\n", file=psql.stdin)

    agent.assert_exp(psql.returncode == 0) # check the command is succesfull

    agent.set_env("WEBTOP_LOCALE", data["locale"])

if "timezone" in data:
    with subprocess.Popen(['podman', 'exec', '-i', 'postgres', 'psql', '-U', 'postgres', 'webtop5'], stdout=sys.stderr, stdin=subprocess.PIPE, text=True) as psql:
        print("DELETE FROM core.settings WHERE service_id = 'com.sonicle.webtop.core' and key = 'default.i18n.timezone';\n", file=psql.stdin)
        print("INSERT INTO core.settings (service_id, key, value) VALUES ('com.sonicle.webtop.core', 'default.i18n.timezone','" + data["timezone"] + "');\n", file=psql.stdin)

    agent.assert_exp(psql.returncode == 0) # check the command is succesfull

    agent.set_env("WEBTOP_TIMEZONE", data["timezone"])

# adjust the ejabberd module, when we disabled globally the chat module we use ''
if "ejabberd_module" in data and "ejabberd_domain" in data:
    ejabberd_module = data["ejabberd_module"]
    ejabberd_domain = data["ejabberd_domain"]
    # Save the ejabberd module UUID to automatically re-configure the module if it is
    # already available:
    if ejabberd_module != "":
        ejabberd_uuid = rdb.hget(f"module/{ejabberd_module}/srv/tcp/xmpp", "module_uuid") or ""
        # retrieve the ejabberd host and port
        ejabberd_host = rdb.hget(f"module/{ejabberd_module}/srv/tcp/xmpp", "host") or ""
        ejabberd_port = rdb.hget(f"module/{ejabberd_module}/srv/tcp/xmpp", "port") or ""
    else:
        # if ejabberd module is empty, we set the default values
        # we do not want to use the chat module
        ejabberd_uuid = ""
        ejabberd_host = "localhost"
        ejabberd_port = "5222"

    with subprocess.Popen(['podman', 'exec', '-i', 'postgres', 'psql', '-U', 'postgres', 'webtop5'], stdout=sys.stderr, stdin=subprocess.PIPE, text=True) as psql:
            print("DELETE FROM core.settings WHERE service_id = 'com.sonicle.webtop.core' and key = 'xmpp.host';\n", file=psql.stdin)
            print("DELETE FROM core.settings WHERE service_id = 'com.sonicle.webtop.core' and key = 'xmpp.port';\n", file=psql.stdin)
            print("INSERT INTO core.settings (service_id, key, value) VALUES ('com.sonicle.webtop.core', 'xmpp.host', '" + ejabberd_host + "');\n", file=psql.stdin)
            print("INSERT INTO core.settings (service_id, key, value) VALUES ('com.sonicle.webtop.core', 'xmpp.port', '" + ejabberd_port + "');\n", file=psql.stdin)

    agent.assert_exp(psql.returncode == 0) # check the command is succesfull

    # we set the env variable to configure the module
    agent.set_env("EJABBERD_MODULE", ejabberd_module)
    agent.set_env("EJABBERD_DOMAIN", ejabberd_domain)
    agent.set_env("EJABBERD_MODULE_UUID", ejabberd_uuid)

if "mail_module" in data and "mail_domain" in data:
    mail_module = data["mail_module"]
    mail_domain = data["mail_domain"]

    smtp_host = rdb.hget(f"module/{mail_module}/srv/tcp/submission", "host") or ""
    smtp_port = rdb.hget(f"module/{mail_module}/srv/tcp/submission", "port") or ""

    imap_host = rdb.hget(f"module/{mail_module}/srv/tcp/imap", "host") or ""
    imap_port = rdb.hget(f"module/{mail_module}/srv/tcp/imap", "port") or ""

    # Save the mail module UUID to automatically re-configure the module if it is
    # already available:
    mail_uuid = rdb.hget(f"module/{mail_module}/srv/tcp/imap", "module_uuid") or ""
    agent.set_env("MAIL_MODULE_UUID", mail_uuid)

    agent.set_env("Z_PUSH_IMAP_SERVER", imap_host)
    agent.set_env("Z_PUSH_SMTP_SERVER", smtp_host)
    agent.set_env("Z_PUSH_SMTP_PORT", smtp_port)

    response = agent.tasks.run(f"module/{mail_module}", action='reveal-master-credentials')
    agent.assert_exp(response['exit_code'] == 0)

    vmail_password = response['output']['password']

    with subprocess.Popen(['podman', 'exec', '-i', 'postgres', 'psql', '-U', 'postgres', 'webtop5'], stdout=sys.stderr, stdin=subprocess.PIPE, text=True) as psql:
        print("DELETE FROM core.settings WHERE service_id = 'com.sonicle.webtop.core' and key = 'smtp.host';\n", file=psql.stdin)
        print("DELETE FROM core.settings WHERE service_id = 'com.sonicle.webtop.core' and key = 'smtp.port';\n", file=psql.stdin)
        print("INSERT INTO core.settings (service_id, key, value) VALUES ('com.sonicle.webtop.core', 'smtp.host', '" + smtp_host + "');\n", file=psql.stdin)
        print("INSERT INTO core.settings (service_id, key, value) VALUES ('com.sonicle.webtop.core', 'smtp.port', '" + smtp_port + "');\n", file=psql.stdin)

        print("DELETE FROM core.settings WHERE service_id = 'com.sonicle.webtop.mail' and key = 'default.host';\n", file=psql.stdin)
        print("DELETE FROM core.settings WHERE service_id = 'com.sonicle.webtop.mail' and key = 'default.port';\n", file=psql.stdin)
        print("INSERT INTO core.settings (service_id, key, value) VALUES ('com.sonicle.webtop.mail', 'default.host', '" + imap_host + "');\n", file=psql.stdin)
        print("INSERT INTO core.settings (service_id, key, value) VALUES ('com.sonicle.webtop.mail', 'default.port', '" + imap_port + "');\n", file=psql.stdin)

        print("DELETE FROM core.settings WHERE service_id = 'com.sonicle.webtop.mail' and key = 'nethtop.vmail.secret';\n", file=psql.stdin)
        print("INSERT INTO core.settings (service_id, key, value) VALUES ('com.sonicle.webtop.mail', 'nethtop.vmail.secret', '" + vmail_password + "');\n", file=psql.stdin)

    agent.assert_exp(psql.returncode == 0) # check the command is succesfull

    agent.set_env("MAIL_MODULE", mail_module)
    agent.set_env("MAIL_DOMAIN", mail_domain)


if "webapp" in data:
    if "debug" in data["webapp"]:
            agent.set_env("WEBAPP_JS_DEBUG", data["webapp"]["debug"])
    if "min_memory" in data["webapp"]:
            agent.set_env("WEBAPP_MIN_MEMORY", data["webapp"]["min_memory"])
    if "max_memory" in data["webapp"]:
            agent.set_env("WEBAPP_MAX_MEMORY", data["webapp"]["max_memory"])

if "webdav" in data:
    if "debug" in data["webdav"]:
            agent.set_env("WEBDAV_DEBUG", data["webdav"]["debug"])
    if "loglevel" in data["webdav"]:
            agent.set_env("WEBDAV_LOG_LEVEL", data["webdav"]["loglevel"])

if "zpush" in data:
    if "loglevel" in data["zpush"]:
            agent.set_env("Z_PUSH_LOG_LEVEL", data["zpush"]["loglevel"])

if "pecbridge_admin_mail" in data:
    agent.set_env("PECBRIDGE_ADMIN_MAIL", data["pecbridge_admin_mail"])

if 'phonebook_instance' in data and data['phonebook_instance'] != "":
    agent.set_env("PHONEBOOK_INSTANCE", data["phonebook_instance"])
    response = agent.tasks.run( agent_id=f"module/{data['phonebook_instance']}", action='get-phonebook-credentials')
    
    if response['exit_code'] == 0:
        pbook = {
            "PHONEBOOK_DB_HOST": response['output'].get("host", ""),
            "PHONEBOOK_DB_PASSWORD": response['output'].get("password", ""),
            "PHONEBOOK_DB_PORT": response['output'].get("port", 3306),
            "PHONEBOOK_DB_NAME": response['output'].get("database", "phonebook"),
            "PHONEBOOK_DB_USER": response['output'].get("user", "phonebook"),
            "PHONEBOOK_NETHVOICE_HOST": response['output'].get("nethvoice_host", ""),
            "PHONEBOOK_INSTANCE_NAME": response['output'].get("instance_name", ""),
            "PHONEBOOK_MODULE_ID": data['phonebook_instance']
        }
        agent.write_envfile("phonebook.env", pbook)
    else:
        raise Exception(f"Failed to get phonebook credentials for {data['phonebook_instance']}: {response['output']}")
else:
    agent.set_env("PHONEBOOK_INSTANCE", "")
    # Remove the phonebook credentials file
    try:
        os.remove("phonebook.env")
    except FileNotFoundError:
        pass
    